# ----------------------------
# Basic
# ----------------------------
HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=10000
# zstyle ':completion:*:default' menu select=1
# zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

setopt AUTO_CD

# ----------------------------
# Added by Zinit's installer
# ----------------------------
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
  print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
  command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# ----------------------------
# Zinit plugins
# ----------------------------
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
zinit light zdharma/history-search-multi-word
zinit light zdharma-zmirror/z-a-submods
zinit light asdf-vm/asdf

zinit ice from"gh-r" as"program" atclone"./install --all --no-bash --no-zsh --no-fish" atpull"%atclone" pick"bin/fzf"
zinit load junegunn/fzf
zinit light Aloxaf/fzf-tab

# ----------------------------
# Paths
# ----------------------------
[[ -d "$HOME/Documents/Applications" ]] && export PATH="$HOME/Documents/Applications:$PATH"
[[ -d "$HOME/bin" ]] && export PATH="$HOME/bin:$PATH"
[[ -d "$HOME/opt/nvim-linux64/bin" ]] && export PATH="$HOME/opt/nvim-linux64/bin:$PATH"
[[ -d "/opt/nvim-linux64/bin" ]] && export PATH="/opt/nvim-linux64/bin:$PATH"

# ----------------------------
# Packages
# ----------------------------
# Homebrew
[[ -d "/opt/homebrew" ]] && eval "$(/opt/homebrew/bin/brew shellenv)"
# Z
[[ -f /usr/local/etc/profile.d/z.sh ]] && . /usr/local/etc/profile.d/z.sh
[[ -f /opt/homebrew/etc/profile.d/z.sh ]] && . /opt/homebrew/etc/profile.d/z.sh
# Direnv
[[ -x "$(which direnv)" ]] && eval "$(direnv hook zsh)"
# Google Cloud SDK
[[ -f "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc" ]] && source "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc"
[[ -f "/opt/homebrew/share/google-cloud-sdk/completion.zsh.inc" ]] && source "/opt/homebrew/share/google-cloud-sdk/completion.zsh.inc"
export CLOUDSDK_PYTHON_SITEPACKAGES=1
# Android SDK
[[ -d "$HOME/Library/Android/sdk/platform-tools" ]] && export PATH="$HOME/Library/Android/sdk/platform-tools:$PATH"

# ----------------------------
# Editor
# ----------------------------
if [[ -x "`which nvim`" ]]; then
  export VISUAL="`which nvim`"
  export EDITOR="`which nvim`"
  export SUDO_EDITOR="`which nvim`"
  alias vi=nvim
  alias vim=nvim
else
  export VISUAL="`which vi`"
  export EDITOR="`which vi`"
  export SUDO_EDITOR="`which vi`"
fi

# ----------------------------
# Aliases
# ----------------------------
alias q="exit"
alias ll="ls -l"
alias la="ls -la"
if [[ "$OSTYPE" == "darwin"* ]]; then
  [[ -x "`which gls`" ]] && alias ls="gls --group-directories-first --color=auto"
elif [[ "$OSTYPE" == "linux-gnu" ]]; then
  alias ls="ls --group-directories-first --color=auto"
fi

[[ -x "`which htop`" ]] && alias top="htop"
[[ -x "`which trash`" ]] && alias rm="trash"

# ----------------------------
# Functions
# ----------------------------
function chpwd { # Show file list after change directory (chpwd = native assign).
  ls -F --group-directories-first --color=auto
}
function psx() { # Grep process by name
  ps ax | grep -v grep | grep -i $1
}
function count() { # Count size in current directory
  echo $(( `ls -l | wc -l`-1 )) `du -sh $@`
}
function killgrep() { # Kill process by name
  for p in `ps -ef | grep -v grep | grep "$1" | awk 'NR>1' | awk '{ print $2 }'`; do
    echo -n "kill: `ps $p | tail -1` [Y/n]:"
    if read -q; then
      kill -s KILL "$p"
      echo ' Kill'
    else
      echo ' Abort'
    fi
  done
}
function replace_multiple_dots() {
  local dots=$LBUFFER[-2,-1]
  if [[ $dots == ".." ]]; then
    LBUFFER=$LBUFFER[1,-3]'../'
  fi
  zle self-insert
}
zle -N replace_multiple_dots
bindkey "." replace_multiple_dots
